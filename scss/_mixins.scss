@use "sass:math";
@use "sass:map";
@use "sass:color";
@use "variables" as *;

// Breakpoint mixins
@function breakpoint-next($name, $breakpoint-names: map.keys($grid-breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name) {
  $min: map.get($grid-breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name) {
  $next: breakpoint-next($name);
  @return if($next, breakpoint-min($next) - .02, null);
}

@mixin breakpoint-up($breakpoint) {
  @if map.has-key($grid-breakpoints, $breakpoint) {
    $breakpoint-value: map.get($grid-breakpoints, $breakpoint);

    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map.keys($grid-breakpoints)}.";
  }
}

@mixin breakpoint-down($name) {
  $max: breakpoint-max($name);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Typography
@mixin font-size($size) {
  font-size: $size;
  line-height: $line-height-base;
}

// Transitions
@mixin transition($property: all) {
  transition: $property $transition-base;
}

// Shadows
@mixin box-shadow($shadow: $box-shadow) {
  box-shadow: $shadow;
}

// Grid mixins
@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: calc($gutter / 2);
  padding-left: calc($gutter / 2);
  margin-right: auto;
  margin-left: auto;
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc($gutter / -2);
  margin-left: calc($gutter / -2);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 math.percentage(math.div($size, $columns));
  max-width: math.percentage(math.div($size, $columns));
}

// RTL mixins
@mixin rtl-property($property, $value) {
  #{$property}: $value;

  [dir="rtl"] & {
    #{$property}: $value;
  }
}

@mixin rtl-properties($properties) {
  [dir="rtl"] & {
    @each $property, $value in $properties {
      #{$property}: $value;
    }
  }
}

// Color contrast
@function color-contrast($background) {
  $r: color.channel($background, "red", $space: rgb);
  $g: color.channel($background, "green", $space: rgb);
  $b: color.channel($background, "blue", $space: rgb);

  $yiq: math.div(($r * 299) + ($g * 587) + ($b * 114), 1000);

  @return if($yiq >= 128, $body-color, $white);
}

// Button mixins
@mixin button-variant(
  $background,
  $border,
  $hover-background: color.scale($background, $lightness: -10%),
  $hover-border: color.scale($border, $lightness: -12.5%)
) {
  $lightness: color.channel($background, "lightness", $space: hsl);
  color: if($lightness > 50%, #000, #fff);
  background-color: $background;
  border-color: $border;

  &:hover {
    $hover-lightness: color.channel($hover-background, "lightness", $space: hsl);
    color: if($hover-lightness > 50%, #000, #fff);
    background-color: $hover-background;
    border-color: $hover-border;
  }

  &:focus {
    outline: 0;
    box-shadow: 0 0 0 0.2rem color.scale($background, $alpha: -75%);
  }

  &:active {
    background-color: color.scale($background, $lightness: -15%);
    border-color: color.scale($border, $lightness: -17.5%);
  }

  &:disabled {
    background-color: color.scale($background, $lightness: 20%);
    border-color: color.scale($border, $lightness: 20%);
  }
}
