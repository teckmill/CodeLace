@use "sass:math";
@use "sass:map";
@use "variables" as *;
@use "mixins" as *;

// Container
.container {
  @include make-container();
  
  @each $breakpoint, $container-max-width in $container-max-widths {
    @include breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

.container-fluid {
  @include make-container();
}

// Row
.row {
  @include make-row();
}

// Columns
@each $breakpoint in map.keys($breakpoints) {
  @include breakpoint-up($breakpoint) {
    $infix: if($breakpoint == xs, "", "-#{$breakpoint}");

    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        @include make-col($i);
      }
    }

    .col#{$infix}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: 100%;
    }

    @for $i from 0 through $grid-columns {
      .offset#{$infix}-#{$i} {
        margin-left: if($i == 0, 0, math.percentage(math.div($i, $grid-columns)));
      }
    }
  }
}

// RTL support
[dir="rtl"] {
  .row {
    flex-direction: row-reverse;
  }

  @each $breakpoint in map.keys($breakpoints) {
    @include breakpoint-up($breakpoint) {
      $infix: if($breakpoint == xs, "", "-#{$breakpoint}");

      @for $i from 0 through $grid-columns {
        .offset#{$infix}-#{$i} {
          margin-right: if($i == 0, 0, math.percentage(math.div($i, $grid-columns)));
          margin-left: 0;
        }
      }
    }
  }
}

// Flex utilities
.d-flex { display: flex !important; }
.flex-row { flex-direction: row !important; }
.flex-column { flex-direction: column !important; }
.justify-content-start { justify-content: flex-start !important; }
.justify-content-center { justify-content: center !important; }
.justify-content-end { justify-content: flex-end !important; }
.align-items-start { align-items: flex-start !important; }
.align-items-center { align-items: center !important; }
.align-items-end { align-items: flex-end !important; }
